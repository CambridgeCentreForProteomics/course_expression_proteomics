{
  "hash": "2f280888e65e7957b17dfa039df3c460",
  "result": {
    "markdown": "---\ntitle: Biological interpretation\nbibliography: course_refs.bib\neditor_options: \n  chunk_output_type: console\n---\n\n\n::: {.callout-tip}\n#### Learning Objectives\n\n* Be aware of different analyses that can be done to gain a biological understanding of expression proteomics results\n* Understand the concept of Gene Ontology (GO) enrichment analyses \n* Complete GO enrichment analyses using the `enrichGO` function from the `clusterProfiler` package\n\n:::\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](figs/flow_chart/flow_chart.012.png){fig-align='center' width=90%}\n:::\n:::\n\n\n\n\n\n## Adding metadata to our results using `dplyr`\n\nBefore we can look any further into the biological meaning of any protein \nabundance changes we need to extract these proteins from our overall results.\nIt is also useful to re-add information about the master protein descriptions\nsince this is lost in the output of `limma` analysis. \n\nIt is important to note that the results table we have generated from `limma`\nis not in the same order as the input data. Therefore, to add information from our\noriginal data e.g., from the `rowData` such as the `Master.Protein.Descriptions`\nwe must match the protein names between them. \n\nTo do this, let's extract information the `Master.Protein.Descriptions` from the original\ndata we have created called `all_proteins`. \n\nRecall that `all_protiens` is `SummarizedExperiment` object,\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall_proteins\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclass: SummarizedExperiment \ndim: 3823 6 \nmetadata(0):\nassays(2): assay aggcounts\nrownames(3823): A0A0B4J2D5 A0A2R8Y4L2 ... Q9Y6X9 Q9Y6Y8\nrowData names(21): Checked Tags ... Protein.FDR.Confidence .n\ncolnames(6): M_1 M_2 ... G1_2 G1_3\ncolData names(4): sample rep condition tag\n```\n:::\n:::\n\n\nWe wish to extract information from the `rowData` regarding the\n`Master.Protein.Descriptions`,\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Add master protein descriptions back\nprotein_info <- all_proteins %>%\n  rowData() %>%\n  as_tibble() %>%\n  select(Protein = Master.Protein.Accessions, \n         protein_description = Master.Protein.Descriptions)\n\nprotein_info %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n  Protein    protein_description                                                \n  <chr>      <chr>                                                              \n1 A0A0B4J2D5 Putative glutamine amidotransferase-like class 1 domain-containing…\n2 A0A2R8Y4L2 Heterogeneous nuclear ribonucleoprotein A1-like 3 OS=Homo sapiens …\n3 A0AVT1     Ubiquitin-like modifier-activating enzyme 6 OS=Homo sapiens OX=960…\n4 A0MZ66     Shootin-1 OS=Homo sapiens OX=9606 GN=SHTN1 PE=1 SV=4               \n5 A1L0T0     2-hydroxyacyl-CoA lyase 2 OS=Homo sapiens OX=9606 GN=ILVBL PE=1 SV…\n6 A1X283     SH3 and PX domain-containing protein 2B OS=Homo sapiens OX=9606 GN…\n```\n:::\n:::\n\n\nNote, we also extract the `Master.Protein.Accessions` column so we can use\nthis to match to the `protein` column in our `limma` results.\n\nNow we can use the `left_join` function from `dplyr` to match the protein\ndescriptions to the protein IDs,\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlimma_results <- limma_results %>% \n  left_join(protein_info, by = \"Protein\")\n\n# Verify\nlimma_results %>%\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Protein     logFC   AveExpr         t      P.Value    adj.P.Val        B\n1  Q9NQW6 -2.077921  2.641270 -40.40812 1.139582e-15 4.356623e-12 25.79468\n2  Q9BW19 -2.343592  1.430210 -36.79774 4.073530e-15 7.786553e-12 24.71272\n3  P49454 -1.991326  2.598481 -34.88623 8.411188e-15 9.266757e-12 24.07905\n4  Q9ULW0 -2.152503  2.476087 -34.52309 9.695796e-15 9.266757e-12 23.95341\n5  Q562F6 -3.205603 -1.304111 -32.91865 1.849860e-14 1.414403e-11 23.37677\n6  O14965 -2.098029  0.797902 -31.22180 3.791132e-14 2.415583e-11 22.72604\n  direction significance\n1      down          sig\n2      down          sig\n3      down          sig\n4      down          sig\n5      down          sig\n6      down          sig\n                                                    protein_description\n1                     Anillin OS=Homo sapiens OX=9606 GN=ANLN PE=1 SV=2\n2 Kinesin-like protein KIFC1 OS=Homo sapiens OX=9606 GN=KIFC1 PE=1 SV=2\n3       Centromere protein F OS=Homo sapiens OX=9606 GN=CENPF PE=1 SV=3\n4 Targeting protein for Xklp2 OS=Homo sapiens OX=9606 GN=TPX2 PE=1 SV=2\n5                 Shugoshin 2 OS=Homo sapiens OX=9606 GN=SGO2 PE=1 SV=2\n6            Aurora kinase A OS=Homo sapiens OX=9606 GN=AURKA PE=1 SV=3\n```\n:::\n:::\n\n\n::: {.callout-note}\n#### Manipulating data with `dplyr` and `tidyverse`\nThere is lots of information online about getting started with `dplyr` and\nusing the `tidyverse`. We really like [this lesson from the Data Carpentry](https://datacarpentry.org/R-ecology-lesson/03-dplyr.html) if\nyou are new to the `tidyverse`.\n\n:::\n\n## Subset differentially abundant proteins\n\nLet's subset our results and only keep proteins which have been flagged as \nexhibiting significant abundance changes, \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsig_changing <- limma_results %>% \n  as_tibble() %>%\n  filter(significance == \"sig\")\n\nsig_up <- sig_changing %>%\n  filter(direction == \"up\")\n\nsig_down <- sig_changing %>%\n  filter(direction == \"down\")\n```\n:::\n\n\n\n## Biological interpretation of differentially abundant proteins\n\nOur statistical analyses provided us with a list of proteins that are present\nwith significantly different abundances between M-phase and G1-phase of the cell \ncycle. We can get an initial idea about what these proteins are and do by \nlooking at the protein descriptions. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Look at descriptions of proteins upregulated in M relative to deysnchronized cells\nsig_up %>%\n  pull(protein_description) %>%\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Golgi reassembly-stacking protein 2 OS=Homo sapiens OX=9606 GN=GORASP2 PE=1 SV=3\"\n[2] \"Selenoprotein S OS=Homo sapiens OX=9606 GN=SELENOS PE=1 SV=3\"                    \n[3] \"Anamorsin OS=Homo sapiens OX=9606 GN=CIAPIN1 PE=1 SV=2\"                          \n[4] \"Krueppel-like factor 16 OS=Homo sapiens OX=9606 GN=KLF16 PE=1 SV=1\"              \n[5] \"Histone H1.10 OS=Homo sapiens OX=9606 GN=H1-10 PE=1 SV=1\"                        \n[6] \"Importin subunit alpha-4 OS=Homo sapiens OX=9606 GN=KPNA3 PE=1 SV=2\"             \n```\n:::\n:::\n\n\nWhilst we may recognise some of the changing proteins, this might be the first\ntime that we are coming across others. Moreover, some protein descriptions \ncontain useful information, but this is very limited. We still want to find out\nmore about the biological role of the statistically significant proteins so that\nwe can infer the potential effects of their abundance changes. \n\nThere are many functional analyses that could be done on the proteins with\ndifferential abundance:\n\n* Investigate the biological pathways that the proteins function within ([KEGG](https://www.genome.jp/kegg/) etc.)\n* Identify potential interacting partners ([IntAct](https://www.ebi.ac.uk/intact/), [STRING](https://string-db.org] etc.))\n* Determine the subcellular localisation in which the changing proteins are found \n* Understand the co-regulation of their mRNAs ([Expression Atlas](https://www.ebi.ac.uk/gxa))\n* Compare our changing proteins to those previously identified in other proteomic\nstudies of the cell cycle\n\n### Gene Ontology (GO) enrichment analysis \n\nOne of the common methods used to probe the biological relevance of proteins\nwith significant changes in abundance between conditions is to carry out Gene\nOntology (GO) enrichment, or over-representation, analysis.\n\nThe Gene Ontology consortium have defined a set of hierarchical descriptions to\nbe assigned to genes and their resulting proteins. These descriptions are split\ninto three categories: cellular components (CC), biological processes (BP) and\nmolecular function (MF). The idea is to provide information about a protein's\nsubcellular localisation, functionality and which processes it contributes to\nwithin the cell. Hence, the overarching aim of GO enrichment analysis is to\nanswer the question:\n\n*\"Given a list of proteins found to be differentially abundant in my phenotype of interest, what are the cellular components, molecular functions and biological processes involved in this phenotype?\".*\n\nUnfortunately, just looking at the GO terms associated with our differentially\nabundant proteins is insufficient to draw any solid conclusions. For example, if\nwe find that 120 of the 453 proteins significantly\ndownregulated in M phase are annotated with the GO term \"kinase activity\", it may\nseem intuitive to conclude that reducing kinase activity is important for the M-phase \nphenotype. However, if 90% of all proteins in the cell were kinases (an extreme\nexample), then we might expect to discover a high representation of the \"kinase\nactivity\" GO term in any protein list we end up with.\n\nThis leads us to the concept of an over-representation analysis. We wish to ask \nwhether any GO terms are over-represented (i.e., present at a higher frequency \nthan expected by chance) in our lists of differentially abundant proteins. In \nother words, we need to know how many proteins with a GO term *could* have\nshown differential abundance in our experiment vs. how many proteins with this\nGO term *did* show differential abundance in our experiment. \n\nWe are going to use a function in R called `enrichGO` from the the\n[`clusterProfiler`](https://bioconductor.org/packages/release/bioc/html/clusterProfiler.html)\n@Yu2012 Bioconductor R package to perform GO enrichment analysis. The package vignette \ncan be found\n[here](https://bioconductor.org/packages/release/bioc/vignettes/clusterProfiler/inst/doc/clusterProfiler.html).\nand full tutorials for using the package [here](https://yulab-smu.top/biomedical-knowledge-mining-book/index.html)\n\n::: {.callout-note}\n#### Annotation packages in Bioconductor\nThe `enrichGO` function uses the [`org.Hs.eg.db`](https://bioconductor.org/packages/release/data/annotation/html/org.Hs.eg.db.html) Bioconductor package that has\ngenome wide annotation for human, primarily based on mapping using Entrez Gene\nidentifiers. It also uses the [`GO.db`](`https://bioconductor.org/packages/release/data/annotation/html/GO.db.html`) package\nwhich is a set of annotation maps describing the entire Gene Ontology assembled using data from GO.\n\n:::\n\nIn the next code chunk we call the `enrichGO` function,\n\n\n::: {.cell}\n\n```{.r .cell-code}\nego_down <- enrichGO(gene = sig_down$Protein,               # list of down proteins\n                     universe = limma_results$Protein,      # all proteins \n                     OrgDb = org.Hs.eg.db,                  # database to query\n                     keyType = \"UNIPROT\",                   # protein ID encoding\n                     pvalueCutoff = 0.05, \n                     qvalueCutoff = 0.05,\n                     ont = \"MF\",                            # can be CC, MF, BP, or ALL\n                     readable = TRUE)\n```\n:::\n\n\n\nLet's take a look at the output.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nego_down\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#\n# over-representation test\n#\n#...@organism \t Homo sapiens \n#...@ontology \t MF \n#...@keytype \t UNIPROT \n#...@gene \t chr [1:453] \"Q9NQW6\" \"Q9BW19\" \"P49454\" \"Q9ULW0\" \"Q562F6\" \"O14965\" \"Q02224\" ...\n#...pvalues adjusted by 'BH' with cutoff <0.05 \n#...65 enriched terms found\n'data.frame':\t65 obs. of  9 variables:\n $ ID         : chr  \"GO:0016491\" \"GO:0005201\" \"GO:0005509\" \"GO:0003756\" ...\n $ Description: chr  \"oxidoreductase activity\" \"extracellular matrix structural constituent\" \"calcium ion binding\" \"protein disulfide isomerase activity\" ...\n $ GeneRatio  : chr  \"65/447\" \"18/447\" \"37/447\" \"9/447\" ...\n $ BgRatio    : chr  \"220/3745\" \"24/3745\" \"99/3745\" \"11/3745\" ...\n $ pvalue     : num  2.97e-13 1.20e-12 3.20e-11 2.01e-07 2.01e-07 ...\n $ p.adjust   : num  1.29e-10 2.60e-10 4.63e-09 1.43e-05 1.43e-05 ...\n $ qvalue     : num  1.06e-10 2.15e-10 3.82e-09 1.18e-05 1.18e-05 ...\n $ geneID     : chr  \"QSOX1/P4HA2/PDIA4/P4HB/PLOD2/HSD17B4/PDIA3/P4HA1/HADHA/DNAJC10/ALDH18A1/POR/MTHFD2/PDIA6/LOXL2/PLOD1/ACADM/TXND\"| __truncated__ \"CCN1/THBS1/SPARC/FN1/TNC/COL12A1/LAMC1/COL23A1/EDIL3/LAMC2/TUFT1/COL4A2/EFEMP1/AGRN/HAPLN1/COL1A1/FBN2/COL6A3\" \"THBS1/SPARC/ITGB1/HSPA5/FSTL1/CALR/EDIL3/HSP90B1/SPTAN1/SDF4/LOXL2/FKBP10/EFEMP1/ESYT1/ASPH/NOTCH2/CANX/PRKCSH/\"| __truncated__ \"QSOX1/PDIA4/P4HB/PDIA3/PDIA6/TXNDC5/TMX1/ERP44/CRELD2\" ...\n $ Count      : int  65 18 37 9 9 23 23 16 12 26 ...\n#...Citation\n T Wu, E Hu, S Xu, M Chen, P Guo, Z Dai, T Feng, L Zhou, W Tang, L Zhan, X Fu, S Liu, X Bo, and G Yu.\n clusterProfiler 4.0: A universal enrichment tool for interpreting omics data.\n The Innovation. 2021, 2(3):100141 \n```\n:::\n:::\n\n\nThe output of the `enrichGO` function is an object of class `enrichResult` that\ncontains the `ID` and `Description` of all enriched GO terms. There is also \ninformation about which `geneID`s from our significantly downregulated proteins \nare annotated with each of the enriched GO terms. Let's take a look at the \ndescriptions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nego_down$Description %>% \n  head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"oxidoreductase activity\"                                      \n [2] \"extracellular matrix structural constituent\"                  \n [3] \"calcium ion binding\"                                          \n [4] \"protein disulfide isomerase activity\"                         \n [5] \"intramolecular oxidoreductase activity, transposing S-S bonds\"\n [6] \"monoatomic cation transmembrane transporter activity\"         \n [7] \"inorganic cation transmembrane transporter activity\"          \n [8] \"glycosaminoglycan binding\"                                    \n [9] \"collagen binding\"                                             \n[10] \"active transmembrane transporter activity\"                    \n```\n:::\n:::\n\n\nThere is a long list because of the hierarchical nature of GO terms. The results\nof GO enrichment analysis can be visualised in many different ways. For a full\noverview of GO enrichment visualisation tools see [*Visualization of functional enrichment result*](https://yulab-smu.top/biomedical-knowledge-mining-book/enrichplot.html).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndotplot(ego_down, \n        x = \"Count\", \n        showCategory = 10, \n        font.size = 10,\n        label_format = 100,\n        color = \"p.adjust\")\n```\n\n::: {.cell-output-display}\n![](07_biological_interpretation_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n::: {.callout-tip}\n#### Key Points\n\n- Gene ontology (GO) terms described the molecular function (MF), biological processes (BP) and cellular component (CC) of proteins.\n- GO terms are hierarchical and generic. They do not relate to specific biological systems e.g., cell type or condition.\n- GO enrichment analysis aims to identify GO terms that are present in a list of proteins of interest (foreground) at a higher frequency than expected by chance based on their frequency in a background list of proteins (universe). The universe should be a list of all proteins included identified and quantified in your experiment.\n- The `enrichGO` function from the `clusterProfiler` package provides a convenient way to carry out reproducible GO enrichment analysis in R.\n:::\n\n## References {-}\n",
    "supporting": [
      "07_biological_interpretation_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}