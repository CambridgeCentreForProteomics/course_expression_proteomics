{
  "hash": "5954e0bba3a93934bc316d5bfb722bef",
  "result": {
    "markdown": "---\ntitle: Statistical analysis of all cell cycle stages\nbibliography: course_refs.bib\neditor_options: \n  chunk_output_type: console\neditor: \n  markdown: \n    wrap: 72\n---\n\n\n::: callout-tip\n#### Learning Objectives\n\n-   Using the `limma` package (@Smyth2004), design a statistical model to test for\n    differentially abundant proteins between more than two conditions\n:::\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](figs/flow_chart/flow_chart.010.png){fig-align='center' width=90%}\n:::\n:::\n\n\n\n::: callout-note\nThis workflow is an adjunct to the [Statistical analysis](./06_statistical_analysis.html) section which demonstrates how to perform single comparison statistical with `limma` (@Smyth2004). Please first read through that material, since it includes background explanations and clarifications which are not repeated here.\n:::\n\n\n\n\n\n## Differential expression analysis\n\nHaving cleaned our data, aggregated from PSM to protein level, completed\na log2 transformation and normalised the data, we are now ready to carry\nout statistical analysis. \n\nThe aim of this section is to answer the\nquestion: *\"Which proteins show a significant change in abundance\nbetween the multiple cell cycle stages?\"*.\n\nOur null hypothesis is: **(H0)** The mean protein abundance is the same across cell cycle stages.\n\nOur alternative hypothesis is: **(H1)** The mean protein abundance differs across cell cycle stages.\n\n\nWe will use `limma` to perform the statistical tests using an **empirical Bayes-moderated linear model**. Please see the [Statistical analysis](./06_statistical_analysis.html) section for more details about `limma` and its application in quantitative proteomics. \n\nDepending on whether the linear model is used to perform single comparisons or multifactorial comparisons, the test statistic will either be a t-value or an F-value, respectively. Here, we will perform both, starting with assessing the overall effect of cell cycle with an F-test. The F-test does not tell us which groups are different to one another, only that the cell cycle stage does affect protein abundance. Later we will see how to perform all the pairwise comparisons with t-tests.\n\n::: callout-note\n\n### What is an F-value?\n\nAn F-value is a parametric statistical value used to compare the mean\nvalues of **three or more** groups. The F-value is the ratio of the between-group\nvariation (explained variance) and the within-group variance (unexplained variance).\nThe higher the F-value, the more significant the difference between the groups is.\n:::\n\n::: callout-note\n\n### What is a t-value?\n\nA t-value is a parametric statistical value used to compare the mean\nvalues of **two** groups. The t-value is the ratio of the difference in means to\nthe standard error of the difference in means. The further away from zero that a\nt-value lies, the more significant the difference between the groups is.\n\n:::\n\n::: callout-note\n\n### How is the p-value obtained?\n\nA p-value may be obtained from a t-value/F-value by comparing the value against an t-value/F-distribution with the appropriate degrees of freedom.\n    \n-   **degrees of freedom** = the number of observations minus the number\n    of independent variables in the model\n-   **p-value** = the probability of achieving the t-value/F-value under the\n    null hypothesis i.e., by chance\n\n:::\n\nHere, we will start by performing a comparison between three groups (M phase, G1 phase and\ndesynchronised) for each protein and obtain an F-value and p-value for each protein.\n\nFirst, we extract the suitable protein experiment. We will remove the pre-treatment sample,\nsince this condition is not replicated and so not amenable to statistical testing.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# extract the log-normalised experiment from our QFeatures object\nall_proteins <- cc_qf[[\"log_norm_proteins\"]]\n\n# subset to exclude the pre-treatment sample\nall_proteins <- all_proteins[, all_proteins$condition != 'Pre-treatment']\n```\n:::\n\n\n### Modelling with or without an intercept\n\nWhen investigating the effect of a single explanatory **categorical** variable with more than two levels, a design matrix can be created using either `model.matrix(~variable)` or\n`model.matrix(~0 + variable)`. The former will create a model that includes an intercept term, whilst the latter will not. If an intercept is included, the first level of the variable (here, M) is considered the 'baseline' and modeled by the intercept. The subsequent levels of the variable (here, G1 and Desynch) are modeled by additional terms in the model, which capture the difference between each other level and the baseline (M). This approach makes intuitive sense if one group of samples are control samples to which all other groups should be compared. Although comparisons can be made between any pair of groups when using a model with an intercept, it's less intuitive than a model without an intercept. In this experiment, none of the groups are a control group to compare to, and we wish to compare between all samples. Thus, we will model without an intercept here.\n\nFor further guidance on generating design matrices for covariates or continuous explanatory\nvariables, see [A guide to creating design matrices for gene expression experiments](https://bioconductor.org/packages/devel/workflows/vignettes/RNAseq123/inst/doc/designmatrices.html#design-and-contrast-matrices).\n\nBelow, we define the model matrix without any intercept term using the `model.matrix(~0 + variable)` formulation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Ensure that conditions are stored as levels of a factor \n## Explicitly define level order by cell cycle stage\nall_proteins$condition <- factor(all_proteins$condition, \n                                 levels = c(\"M\", \"G1\", \"Desynch\"))\n\n## Design a matrix containing all factors that we wish to model\ncondition <- all_proteins$condition\nm_design <- model.matrix(~0 + condition)\n\n# Rename design matrix columns to make them easier to refer to\ncolnames(m_design) <- levels(condition)\n\n## Verify\nm_design\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  M G1 Desynch\n1 1  0       0\n2 1  0       0\n3 1  0       0\n4 0  1       0\n5 0  1       0\n6 0  1       0\n7 0  0       1\n8 0  0       1\n9 0  0       1\nattr(,\"assign\")\n[1] 1 1 1\nattr(,\"contrasts\")\nattr(,\"contrasts\")$condition\n[1] \"contr.treatment\"\n```\n:::\n:::\n\n\n### What are contrasts?\n\nWe also define **contrasts**. The contrasts represent comparisons\nare of interest to us, e.g M phase vs Desynchronised. This is important since we are not directly\ninterested in the parameter (mean) estimates for each group but rather\nthe differences in these parameter (mean) estimates *between* groups.\nThe `makeContrasts` function is used by passing the name we wish to give\neach contrast and how this contrast should be calculated using column\nnames from the design matrix. We also pass the `levels` argument to tell\nR where the column names come from i.e., which design matrix the\ncontrasts are being applied to.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Specify contrasts of interest\ncontrasts <- makeContrasts(G1_M = G1 - M, \n                           M_Des = M - Desynch, \n                           G1_Des = G1 - Desynch,\n                           levels = m_design)\n\n## Verify\ncontrasts\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         Contrasts\nLevels    G1_M M_Des G1_Des\n  M         -1     1      0\n  G1         1     0      1\n  Desynch    0    -1     -1\n```\n:::\n:::\n\n\n### Running an empirical Bayes moderated test using `limma`\n\nAfter we have specified the design matrix and contrasts we wish to make,\nthe next step is to apply the statistical model. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Fit linear model using the design matrix and desired contrasts\nfit_model <- lmFit(object = assay(all_proteins), design = m_design)\nfit_contrasts <- contrasts.fit(fit = fit_model, contrasts = contrasts)\n```\n:::\n\n\nThe initial model has now been applied to each of the proteins in our data. We now update the model using the `eBayes` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Update the model using the limma eBayes algorithm\nfinal_model <- eBayes(fit = fit_contrasts, \n                      trend = TRUE,\n                      robust = TRUE)\n```\n:::\n\n\n### Accessing the model results\n\nTo get the results for all of our proteins we use the `topTable` function with the `number = Inf` argument.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Format results\nlimma_results_all_contrasts <- topTable(\n  fit = final_model,   \n  coef = NULL, \n  adjust.method = \"BH\",    # Method for multiple hypothesis testing\n  number = Inf) %>%        # Print results for all proteins\n  rownames_to_column(\"Protein\") \n\n## Verify\nhead(limma_results_all_contrasts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Protein      G1_M      M_Des     G1_Des    AveExpr        F      P.Value\n1  Q9NQW6 -2.077921  0.8130706 -1.2648507  2.7165663 794.7797 5.148901e-15\n2  Q9ULW0 -2.152503  0.7854924 -1.3670105  2.5730063 685.1572 1.425086e-14\n3  P49454 -1.991326  1.1442558 -0.8470698  2.5489502 598.3086 3.606132e-14\n4  O14965 -2.098029  0.9147903 -1.1832391  0.8426435 551.3458 6.308302e-14\n5  Q562F6 -3.205603  1.4313091 -1.7742942 -1.2469471 546.9525 6.662987e-14\n6  Q15004 -1.355585 -1.0359248 -2.3915102  0.8346698 542.7099 7.027329e-14\n     adj.P.Val\n1 1.968425e-11\n2 2.724051e-11\n3 4.477580e-11\n4 4.477580e-11\n5 4.477580e-11\n6 4.477580e-11\n```\n:::\n:::\n\n\n### QC plots for statistical test assumptions\n\nFirst we examine whether there is the expected relationship between abundance and variance, and that the trend line captures this.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplotSA(fit = final_model,\n       cex = 0.5,\n       xlab = \"Average log2 abundance\")\n```\n\n::: {.cell-output-display}\n![](11_statistical_analysis_all_stages_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nNext, we check that the p-value distribution is as expected.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlimma_results_all_contrasts %>%\n  as_tibble() %>%\n  ggplot(aes(x = P.Value)) + \n  geom_histogram()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](11_statistical_analysis_all_stages_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n## Interpreting the overall linear model output\n\nHaving checked that the model we fitted was appropriate for the data, we can now take a look at the results of our test.\n\nAs we saw above, `topTable` will give us the overall output of our linear model. We previously used this function to generate our `limma_results_all_contrasts` without specifying any value for the `coef` argument.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(limma_results_all_contrasts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Protein      G1_M      M_Des     G1_Des    AveExpr        F      P.Value\n1  Q9NQW6 -2.077921  0.8130706 -1.2648507  2.7165663 794.7797 5.148901e-15\n2  Q9ULW0 -2.152503  0.7854924 -1.3670105  2.5730063 685.1572 1.425086e-14\n3  P49454 -1.991326  1.1442558 -0.8470698  2.5489502 598.3086 3.606132e-14\n4  O14965 -2.098029  0.9147903 -1.1832391  0.8426435 551.3458 6.308302e-14\n5  Q562F6 -3.205603  1.4313091 -1.7742942 -1.2469471 546.9525 6.662987e-14\n6  Q15004 -1.355585 -1.0359248 -2.3915102  0.8346698 542.7099 7.027329e-14\n     adj.P.Val\n1 1.968425e-11\n2 2.724051e-11\n3 4.477580e-11\n4 4.477580e-11\n5 4.477580e-11\n6 4.477580e-11\n```\n:::\n:::\n\n\nInterpreting the output of `topTable` for a multi-contrast model:\n\n-   `G1_M`, `M_Des` and `G1_Des` = the estimated log2FC for each model\n    contrast\n-   `AveExpr` = the average log abundance of the protein across samples\n-   `F` = eBayes moderated F-value. Interpreted in the same way as a\n    normal F-value (see above).\n-   `P.Value` = Unadjusted p-value\n-   `adj.P.Val` = FDR-adjusted p-value (adjusting across proteins but not multiple contrasts)\n\n\n### Interpreting the results of a single contrast\n\nWe can look at individual contrasts by passing the contrast name to the\n`coef` argument in the `topTable` function. For example, let's look at\nthe pairwise comparison between M-phase and desynchronised cells. We use\nthe `topTable` function to get the results of the `\"M_Des\"` contrast. We\nuse the argument `confint = TRUE` so that the our output reports the 95%\nconfidence interval of the calculated log2FC.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nM_Desynch_results <- topTable(fit = final_model, \n                              coef = \"M_Des\", \n                              number = Inf,\n                              adjust.method = \"BH\",\n                              confint = TRUE) %>%\n  rownames_to_column(\"Protein\")\n\n## Verify\nhead(M_Desynch_results)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Protein      logFC       CI.L       CI.R   AveExpr         t      P.Value\n1  P31350 -2.8479188 -3.0751121 -2.6207254 -1.113925 -26.91319 2.350968e-13\n2  O00622  1.3935764  1.2583727  1.5287801  1.822783  22.12969 3.333718e-12\n3  P46013  0.7490389  0.6686160  0.8294618  4.944857  19.99669 1.303459e-11\n4  P11388  1.0847590  0.9671981  1.2023198  4.047165  19.81088 1.477276e-11\n5  P49454  1.1442558  1.0202037  1.2683079  2.548950  19.80397 1.484201e-11\n6  P11021  0.6622147  0.5840995  0.7403298  5.655878  18.20106 4.586280e-11\n     adj.P.Val        B\n1 8.987752e-10 20.71754\n2 6.372403e-09 18.32184\n3 1.134820e-08 17.03986\n4 1.134820e-08 16.92071\n5 1.134820e-08 16.91625\n6 2.922225e-08 15.83230\n```\n:::\n:::\n\n\nInterpreting the output of `topTable` for a single contrast:\n\n-   `logFC` = the fold change between the mean log abundance in group A\n    and the mean log abundance in group B\n-   `CI.L` = the left limit of the 95% confidence interval for the\n    reported log2FC\n-   `CI.R` = the right limit of the 95% confidence interval for the\n    reported log2FC\n-   `AveExpr` = the average log abundance of the protein across samples\n-   `t` = t-statistic derived from the original statistical test (not a\n    t-test)\n-   `P.Value` = Unadjusted p-value\n-   `adj.P.Val` = FDR-adjusted p-value (adjusted across proteins but not\n    multiple contrasts)\n-   `B` = B-statistic representing the log-odds that a protein is\n    differentially abundant between conditions\n\nThis time the output of `topTable` contains a t-statistic rather than an\nF-value. This is because we only told the function to compare two\nconditions, so the corresponding t-statistic from our linear test is\nreported. Importantly, however, the p-value adjustment in this case only\naccounts for multiple tests across our 3823 proteins,\nnot the three different contrasts/comparisons we used the data for. As a\nresult, we could over-estimate the number of statistically significant\nproteins within this contrast, although this this effect is only likely\nto become problematic when we have a larger number of contrasts to\naccount for.\n\n### Visualising the results of our single contrast test\n\nBelow, we produce a volcano plot to visualisation the statistical test results for the M vs Desynchronised contrast.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nM_Desynch_results %>%\n  mutate(significance = ifelse(adj.P.Val < 0.01, \"sig\", \"not.sig\")) %>%\n  ggplot(aes(x = logFC, y = -log10(P.Value), fill = significance)) +\n  geom_point(shape = 21, stroke = 0.25, size = 3) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](11_statistical_analysis_all_stages_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n### Interpreting the results of all contrasts\n\nTo understand the impact of adjusting for multiple hypothesis testing\nacross our comparisons, we can use the `decideTests` function. This\nfunction provides a matrix of values -1, 0 and +1 to indicate whether a\nprotein is significantly downregulated, unchanged or significantly\nupregulated in a given contrast. For the function to determine\nsignificance we have to provide a p-value adjustment method and\nthreshold, here we use the standard Benjamini-Hochberg procedure for FDR\nadjustment and set a threshold of `adj.P.Value < 0.01` for significance.\n\nThe `decideTests` function also takes an argument called `method`. This\nargument specifies whether p-value adjustment should account only for\nmultiple hypothesis tests across proteins (`\"separate\"`) or across both\nproteins and contrasts (`\"global\"`).\n\nLet's first look at the results when we apply the `\"separate\"` method\ni.e., consider each contrast separately.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndt <- decideTests(object = final_model,\n            adjust.method = \"BH\", \n            p.value = 0.01, \n            method = \"separate\")\n\nsummary(dt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       G1_M M_Des G1_Des\nDown    429   438     86\nNotSig 3002  2757   3610\nUp      392   628    127\n```\n:::\n:::\n\n\nFrom this table we can see the number of significantly changing proteins\nper contrast. For the `M_Des` comparison the total number of\nsignificantly changing proteins is 1066. This should be the same as the number of proteins with an adjusted p-value \\< 0.01 in our\n`M_Desynch_results` object. Let's check.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nM_Desynch_results %>%\n  as_tibble() %>%\n  filter(adj.P.Val < 0.01) %>% \n  nrow()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1066\n```\n:::\n:::\n\n\nHowever, if we use the `\"global\"` method for p-value adjustment and\ntherefore adjust for both per protein and per contrast hypotheses we may\nsee slightly fewer significant proteins in our `M_Des` contrast.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndecideTests(object = final_model,\n            adjust.method = \"BH\", \n            p.value = 0.01, \n            method = \"global\") %>%\n  summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       G1_M M_Des G1_Des\nDown    413   403    110\nNotSig 3034  2835   3517\nUp      376   585    196\n```\n:::\n:::\n\n\nUnfortunately, there is no way to specify global p-value adjustment\naccounting for all contrasts when using `topTable` to look at a single\ncontrast. Instead, we can merge the results from our globally adjusted\nsignificance summary (generated using `decideTests` with\n`method = \"global\"`) with the results of our overall linear model test\n(generated using `topTable` with `coef = NULL`). We demonstrate how to\ndo this in the code below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Determine global significance using decideTests\nglobal_sig <- decideTests(object = final_model, \n                          adjust.method = \"BH\", \n                          p.value = 0.01, \n                          method = \"global\") %>%\n  as.data.frame() %>% \n  rownames_to_column(\"protein\")\n\n\n## Change column names to avoid conflict when binding\ncolnames(global_sig) <- paste0(\"sig_\", colnames(global_sig))\n\n## Add the results of global significance test to overall linear model results\nlimma_results_all_contrasts <- dplyr::left_join(limma_results_all_contrasts, \n                                  global_sig, \n                                  by = c(\"Protein\" = \"sig_protein\"))\n\n## Verify\nlimma_results_all_contrasts %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Protein      G1_M      M_Des     G1_Des    AveExpr        F      P.Value\n1  Q9NQW6 -2.077921  0.8130706 -1.2648507  2.7165663 794.7797 5.148901e-15\n2  Q9ULW0 -2.152503  0.7854924 -1.3670105  2.5730063 685.1572 1.425086e-14\n3  P49454 -1.991326  1.1442558 -0.8470698  2.5489502 598.3086 3.606132e-14\n4  O14965 -2.098029  0.9147903 -1.1832391  0.8426435 551.3458 6.308302e-14\n5  Q562F6 -3.205603  1.4313091 -1.7742942 -1.2469471 546.9525 6.662987e-14\n6  Q15004 -1.355585 -1.0359248 -2.3915102  0.8346698 542.7099 7.027329e-14\n     adj.P.Val sig_G1_M sig_M_Des sig_G1_Des\n1 1.968425e-11       -1         1         -1\n2 2.724051e-11       -1         1         -1\n3 4.477580e-11       -1         1         -1\n4 4.477580e-11       -1         1         -1\n5 4.477580e-11       -1         1         -1\n6 4.477580e-11       -1        -1         -1\n```\n:::\n:::\n\n\nWe now have three additional column, one per contrast, called\n`sig_G1_M`, `sig_M_Des`, and `sig_G1_Des`. These columns contain -1, 0\nor 1 meaning that the protein is significantly downregulated,\nnon-significant or significantly upregulated in the given contrast.\n\n### Visualising the protein abundances in a heatmap\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Extract accessions of significant proteins\n\n# Summarise how often each protein passes the significance threshold\n# across the 3 contrasts\nn_sig <- decideTests(object = final_model, \n                          adjust.method = \"BH\", \n                          p.value = 0.01, \n                          method = \"global\") %>%\n  apply(MARGIN = 1, FUN = function(x) sum(x != 0))\n\n# Identify the proteins significant at least once\nsig_proteins <- names(n_sig)[n_sig > 0]  \n\n## Subset quantitative data corresponding to significant proteins\nquant_data <- cc_qf[[\"log_norm_proteins\"]][sig_proteins, ] %>%\n  assay() \n```\n:::\n\n\nNow we use the quantitative data to plot a heatmap using `pheatmap`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\npheatmap(mat = quant_data,\n         scale = 'row', # Z-score normalise across the rows (proteins)\n         show_rownames = FALSE) # Too many proteins to show all their names!\n```\n\n::: {.cell-output-display}\n![](11_statistical_analysis_all_stages_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n::: {.callout-tip}\n#### Key Points\n\n-   The `limma` package provides a statistical pipeline for the analysis\n    of differential expression (abundance) experiments and can be used for categorical variables with more than two levels.\n-   When performing multiple contrasts, the p-value adjustment for multiple        testing should take this into account. `decideTests` with\n    `method = \"global\"` can be used to this end.\n:::\n\n## References {.unnumbered}\n",
    "supporting": [
      "11_statistical_analysis_all_stages_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}